{"version":3,"sources":["Components/Wrapper/index.js","Components/AvengerCard/index.js","Components/Scorebar/index.js","Components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","AvengerCard","alt","name","src","image","onClick","handleOnClick","Scorebar","id","count","highScore","message","Jumbotron","App","state","avengers","_this","shuffle","score","isClicked","event","currentImage","target","includes","setState","concat","array","i","length","j","Math","floor","random","_ref","_this2","this","Fragment","Components_Jumbotron","Components_Scorebar","Components_Wrapper","map","avenger","Components_AvengerCard","key","clicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15f65707.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction AvengerCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} onClick={props.handleOnClick}/>\n            </div>\n        </div>\n    );\n}\n\nexport default AvengerCard;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Scorebar(props) {\n  return (\n    <div className=\"container\" id=\"scoreJumbo\">\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <p className=\"text-center font-weight-bold\">Score: {props.count}</p>\n        </div>\n        <div className=\"col-lg-6\">\n          <p className=\"text-center font-weight-bold\">High Score: {props.highScore}</p>\n        </div>\n      </div>\n      <p className=\"text-center font-weight-bold\">{props.message}</p>\n    </div>\n  );\n}\n\nexport default Scorebar;\n","import React from 'react';\nimport \"./style.css\"\n\nfunction Jumbotron() {\n    return (\n    <div className=\"jumbotron jumbotron-fluid\" id=\"topJumbo\">\n        <div className=\"container\">\n            <h1 className=\"text-white display-3\">Avenger Clicky Game!</h1>\n            <p className=\"text-white lead\">Try not to click the same avenger twice.</p>\n        </div>\n    </div>\n    );\n};\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport Wrapper from './Components/Wrapper'\nimport AvengerCard from './Components/AvengerCard'\nimport Scorebar from './Components/Scorebar'\nimport Jumbotron from './Components/Jumbotron'\nimport avengers from './avengers.json'\n\nclass App extends Component {\n\n  state = {\n    avengers: this.shuffle(avengers),\n    score: 0,\n    highScore: 0,\n    isClicked: [],\n    message: \"Click an image to begin\"\n  }\n\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  handleOnClick = event => {\n    const currentImage = event.target.alt;\n    if (this.state.isClicked.includes(currentImage)) {\n      this.setState({\n        score: 0,\n        isClicked: [],\n        message: \"You already clicked that one. Game Over. Click again!\",\n        highScore: (this.state.highScore <= this.state.score) ? this.state.score : this.state.highScore,\n        avengers: this.shuffle(avengers)\n      })\n    }\n    else {\n      this.setState({\n        isClicked: this.state.isClicked.concat(currentImage),\n        score: this.state.score + 1,\n        message: \"Nice work! Keep going!\",\n        avengers: this.shuffle(avengers)\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <>\n        <Jumbotron />\n        <Scorebar\n          count={this.state.score}\n          highScore={this.state.highScore}\n          message={this.state.message} />\n        <Wrapper>\n          {this.state.avengers.map(avenger => (\n            <AvengerCard\n              id={avenger.id}\n              key={avenger.id}\n              name={avenger.name}\n              image={avenger.image}\n              handleOnClick={this.handleOnClick}\n              clicked={avenger.clicked} />\n          ))}\n        </Wrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}